name: Atlas bootstrap

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  scaffold:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Create Atlas scaffold
        run: |
          mkdir -p app
          cat > app/__init__.py <<'PY'
          # Atlas package init
          PY
          cat > app/config.py <<'PY'
          import os

          def _need(name: str) -> str:
              v = os.getenv(name)
              if not v:
                  raise RuntimeError(f"Missing env var: {name}")
              return v

          SUPABASE_URL = _need("SUPABASE_URL")
          SUPABASE_ANON_KEY = _need("SUPABASE_ANON_KEY")
          OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
          PY
          cat > app/atlas.py <<'PY'
          def hello(name: str = "D") -> str:
              return f"Atlas online. Ready to work, {name}."
          PY
          cat > app/cli.py <<'PY'
          from app.atlas import hello

          if __name__ == "__main__":
              print(hello())
          PY

          cat > requirements.txt <<'TXT'
          supabase
          python-dotenv
          openai
          TXT

          cat > .env.example <<'ENV'
          SUPABASE_URL=https://YOUR-PROJECT.supabase.co
          SUPABASE_ANON_KEY=ey...
          OPENAI_API_KEY=sk-...
          ENV

          if [ -f README.md ]; then
            cat >> README.md <<'MD'

          ## Quickstart

          1. Copy `.env.example` to `.env` and fill your keys.
          2. Install deps:
             ```
             pip install -r requirements.txt
             ```
          3. Run CLI:
             ```
             python -m app.cli
             ```
          MD
          else
            cat > README.md <<'MD'
            # Atlas

            Personal AI assistant (Jarvis-style) with Python + Supabase.

            ## Quickstart
            1. Copy `.env.example` to `.env` and fill your keys.
            2. Install deps:
               ```
               pip install -r requirements.txt
               ```
            3. Run CLI:
               ```
               python -m app.cli
               ```
            MD
          fi

      - name: Commit scaffold
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "atlas-agent"
          git config user.email "atlas@users.noreply.github.com"
          git add -A
          git commit -m "chore: scaffold Atlas app structure"
          git push
