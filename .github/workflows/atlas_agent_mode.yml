name: Atlas Agent
on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"

permissions:
  contents: write
  issues: write

jobs:
  patrol:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Preflight â€“ normalize BASE_API
        id: preflight
        run: |
          set -e
          if [ -z "${{ secrets.RENDER_API_URL }}" ]; then
            echo "RENDER_API_URL secret is empty"; exit 1
          fi
          BASE="${{ secrets.RENDER_API_URL }}"
          BASE="${BASE%/}"
          echo "BASE_API=$BASE" >> $GITHUB_OUTPUT

      - name: Discover health path
        id: discover
        run: |
          set -e
          BASE="${{ steps.preflight.outputs.BASE_API }}"
          tried=()
          for p in /health /api/health /v1/health /api/v1/health /atlas/health; do
            echo "Trying ${BASE}${p}"
            tried+=("${BASE}${p}")
            RES=$(curl -sS -w "\n%{http_code}" "${BASE}${p}" || true)
            BODY=$(echo "$RES" | head -n1)
            CODE=$(echo "$RES" | tail -n1)
            if echo "$BODY" | grep -q '"ok": *true'; then
              echo "HEALTH_PATH=$p" >> $GITHUB_OUTPUT
              echo "Found health at ${BASE}${p} (status $CODE)"
              exit 0
            fi
          done
          echo "Could not locate a health endpoint returning {\"ok\": true}. Tried:"
          printf '%s\n' "${tried[@]}"
          exit 1

      - name: GET health (must be ok:true)
        run: |
          set -e
          BASE="${{ steps.preflight.outputs.BASE_API }}"
          HPATH="${{ steps.discover.outputs.HEALTH_PATH }}"
          curl -sS "${BASE}${HPATH}" | tee /tmp/health.json
          grep -q '"ok": *true' /tmp/health.json

      - name: Warm endpoints
        run: |
          BASE="${{ steps.preflight.outputs.BASE_API }}"
          curl -sS "${BASE}/hello?name=Atlas" > /dev/null || true
          curl -sS "${BASE}/notes/list?user_id=test" > /dev/null || true

      - name: Measure latency & record heartbeat
        run: |
          set -e
          BASE="${{ steps.preflight.outputs.BASE_API }}"
          mkdir -p .atlas
          ts=$(date -Is)
          t1=$(curl -o /dev/null -sS -w '%{time_total}' "${BASE}/hello?name=Atlas" || echo "0")
          t2=$(curl -o /dev/null -sS -w '%{time_total}' "${BASE}/notes/list?user_id=test" || echo "0")
          cat > .atlas/last_agent_run.json <<EOF
          {
            "timestamp": "$ts",
            "base_api": "$BASE",
            "latency": { "hello": "$t1", "notes_list": "$t2" }
          }
          EOF
          cat .atlas/last_agent_run.json

      - name: Commit heartbeat
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(agent): patrol heartbeat"
          file_pattern: .atlas/last_agent_run.json

      - name: Trigger Vercel redeploy (optional)
        if: ${{ secrets.VERCEL_HOOK_URL != '' }}
        run: |
          curl -fsSL -X POST "${{ secrets.VERCEL_HOOK_URL }}" || echo "No Vercel hook set"